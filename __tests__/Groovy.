import groovy.json.JsonSlurper

def dockerMiskWebVersion = "0.1.4"

task web(type: Exec) {
  // -Pcmd='-d': pass in argument to misk-web shell script in Docker container
  // -Ptabs='tabs/config, tabs/example': spins up parallel Docker containers with the following paths as volumes
  // -Pdockerd: boolean to run Docker container as daemon in background
  // -Psingle: force run the command in a single non-parallelized Docker container
  // -Pdv: use docker version from tab's package.json instead of the default one in `web.gradle`
  // Running webpack-dev-servers for various tabs: ./gradlew web -Pcmd='-d' -Ptabs='tabs/config, tabs/example'
  // Build all tabs: ./gradlew web
  // See other misk-web options: ./gradlew web -Pcmd='-h'

  def projectName = project.projectDir.toString().split('/').dropRight(1).last()
  def subProjectName = project.projectDir.toString().split('/').last()

  def slugify = { str ->
    def slug = str.split('/').join('-').split('@').join('')
    if (slug.startsWith('-')) {
      slug = slug.drop(1)
    }
    return slug
  }

  def generateDockerContainerName = { task ->
    def slug = slugify(task)
    if (slug == "") {
      return "${new Date().format("YMD-HMS")}-${projectName}-${subProjectName}-web"
    } else {
      return "${new Date().format("YMD-HMS")}-${projectName}-${subProjectName}-web-${slug}"
    }
  }

  def getPackageJsonPort = { path ->
    def packageFile = file("$path/package.json")
    try {
      def packageJson = new JsonSlurper().parseText(packageFile.text)
      return packageJson.miskTab.port
    } catch (error) {
      println error
      return null
    }
  }

   def getJsonPort = { path ->
    def packageFile = file("$path/miskTab.json")
    try {
      def miskTab = new JsonSlurper().parseText(packageFile.text)
      return miskTab.port
    } catch (error) {
      println error
      return null
    }
  }

  def getPackageVersion = { path ->
    def packageFile = new File("$path/package.json")
    try {
      def packageJson = new JsonSlurper().parseText(packageFile.text)
      return packageJson.miskTab.version
    } catch (error) {
      println error
      return null
    }
  }

    def getVersion = { path ->
    def packageFile = new File("$path/miskTab.json")
    try {
      def miskTab = new JsonSlurper().parseText(packageFile.text)
      return miskTab.version
    } catch (error) {
      println error
      return null
    }
  }

  def generateDockerRunCommand = {
    projectPath, path, cmd, daemon = "-d", image = "squareup/misk-web" ->
      try {
        def containerName = "${generateDockerContainerName(path)}"
        def port = ""
        def rawPort = getPackageJsonPort("${projectPath}/web/${path}")
        def miskTabPort = getJsonPort("${projectPath}/web/${path}")
        if (miskTabPort != null) {
          port = "-p ${miskTabPort}:${miskTabPort}"
        } else if (rawPort != null) {
          port = "-p ${rawPort}:${rawPort}"
        }
        def versionWarningLog = ""
        def imageVersion = dockerMiskWebVersion
        def packageVersion = getPackageVersion("${projectPath}/web/${path}")
        def miskTabVersion = getVersion("${projectPath}/web/${path}")
        if (project.hasProperty("dv") && miskTabVersion != null) {
          imageVersion = miskTabVersion
        } else if (project.hasProperty("dv") && packageVersion != null) {
          imageVersion = packageVersion
        }
        def command = "docker run ${daemon} --rm --name ${containerName} -v ${projectPath}/web${path}:/web${path.split("packages")[-1]} ${port} ${image}:${imageVersion} ${cmd}"
        def logsDir = "${projectPath}/web/logs/"
        println "\nContainer: ${containerName} ${cmd}"
        println "Running... \$ ${command}"
        println "Logs       \$ docker logs -f ${containerName}"
        println "Logs File  ${logsDir}${containerName.toString()}.log"
        println "Shut Down  \$ docker kill ${containerName}"
        def waitForContainer = "while ! docker ps --format '{{.Names}}' | grep -q '${containerName}'; do sleep 1; done"
        def formattedLogs = "mkdir -p $logsDir && bash -c \'docker logs -f ${containerName} | tee \"${logsDir}${containerName.toString()}.log\" > >(sed \"s/^/[${slugify(path)}] /\") 2> >(sed \"s/^/[${slugify(path)}][err] /\" >&2) &\'"
        return "sh -c '$command &'; $waitForContainer && $formattedLogs $versionWarningLog"
      } catch (error) {
        println error
        return "sh -c 'echo \"[${path}][ERROR] This container failed because of the following error in web.gradle: ${error}\" && echo \"\" && echo \"\"'"
      }
  }

  def cmd = ""
  if (project.hasProperty("cmd")) {
    cmd = project.cmd
  } else {
    cmd = "-g"
  }

  def dockerd = ""
  if (project.hasProperty("dockerd")) {
    dockerd = "-d"
  }

  def single = false
  if (project.hasProperty("single")) {
    single = true
  }

  def runCommand = ""

  if (project.hasProperty("tabs")) {
    if (project.tabs.split(',').length > 1) {
      dockerd = "-d"
    }

    project.tabs.split(',').each {
      def command = generateDockerRunCommand(project.projectDir, "/$it", "/bin/misk-web ${cmd}",
              dockerd)
      if (runCommand != "") {
        runCommand += " && "
      }
      runCommand += command
    }
  } else if (single || cmd == "-r") {
    runCommand += generateDockerRunCommand(project.projectDir, "", "/bin/misk-web ${cmd}", dockerd)
  } else {
    // Spin up parallel images for all @misk/ packages and tabs
    def paths = []
    try {
      new File("${project.projectDir}/web/tabs").eachDir {
        paths += it.toString().split('/web/').drop(1)[0]
      }
    } catch (all) {
      println "No tabs found in ${project.projectDir}/web/tabs"
    }

    if (new File("${project.projectDir}/web/packages/")) {
      def command = generateDockerRunCommand(project.projectDir, "/packages", "/bin/misk-web ${cmd}",
              dockerd)
      if (runCommand != "") {
        runCommand += " && "
      }
      runCommand += command
    }

    if (paths.size() > 1) {
      dockerd = "-d"
    }

    paths.each {
      def noRefresh = ""
      if (it.split("packages").length > 1) {
        noRefresh =  "-n"
      }
      def command = generateDockerRunCommand(project.projectDir, "/$it", "/bin/misk-web ${noRefresh} ${cmd}",
              dockerd)
      if (runCommand != "") {
        runCommand += " && "
      }
      runCommand += command
    }
  }

  def sleepUntilDockerExits = "while docker ps --format '{{.Names}}' | grep -q '${projectName}-${subProjectName}-web'; do echo -e \"\\r\\033[1A\\033[0K[\$(date +'%Y-%m-%d %T')] waiting for [\$(docker ps --format '{{.Names}}' | grep '${projectName}-${subProjectName}' | wc -l | tr -d '\t')] ${projectName}-${subProjectName}-web running containers to finish...\" && sleep 5; done"
  runCommand += " && ${sleepUntilDockerExits}"
  commandLine 'sh', '-c', runCommand
}
